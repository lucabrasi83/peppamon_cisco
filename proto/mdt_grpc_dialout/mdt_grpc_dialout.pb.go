// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/mdt_grpc_dialout/mdt_grpc_dialout.proto

package mdt_dialout

/*
	Package implements gRPC Model Driven Telemetry service
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// MdtDialoutArgs is the content pushed to the server
type MdtDialoutArgs struct {
	ReqId int64 `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	// data carries the payload content.
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Errors string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (m *MdtDialoutArgs) Reset()         { *m = MdtDialoutArgs{} }
func (m *MdtDialoutArgs) String() string { return proto.CompactTextString(m) }
func (*MdtDialoutArgs) ProtoMessage()    {}
func (*MdtDialoutArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_mdt_grpc_dialout_2f1e28c7e7e85859, []int{0}
}
func (m *MdtDialoutArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MdtDialoutArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MdtDialoutArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MdtDialoutArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MdtDialoutArgs.Merge(dst, src)
}
func (m *MdtDialoutArgs) XXX_Size() int {
	return m.Size()
}
func (m *MdtDialoutArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_MdtDialoutArgs.DiscardUnknown(m)
}

var xxx_messageInfo_MdtDialoutArgs proto.InternalMessageInfo

func (m *MdtDialoutArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *MdtDialoutArgs) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MdtDialoutArgs) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

func init() {
	proto.RegisterType((*MdtDialoutArgs)(nil), "mdt_dialout.MdtDialoutArgs")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GRPCMdtDialoutClient is the client API for GRPCMdtDialout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCMdtDialoutClient interface {
	MdtDialout(ctx context.Context, opts ...grpc.CallOption) (GRPCMdtDialout_MdtDialoutClient, error)
}

type gRPCMdtDialoutClient struct {
	cc *grpc.ClientConn
}

func NewGRPCMdtDialoutClient(cc *grpc.ClientConn) GRPCMdtDialoutClient {
	return &gRPCMdtDialoutClient{cc}
}

func (c *gRPCMdtDialoutClient) MdtDialout(ctx context.Context, opts ...grpc.CallOption) (GRPCMdtDialout_MdtDialoutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCMdtDialout_serviceDesc.Streams[0], "/mdt_dialout.gRPCMdtDialout/MdtDialout", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCMdtDialoutMdtDialoutClient{stream}
	return x, nil
}

type GRPCMdtDialout_MdtDialoutClient interface {
	Send(*MdtDialoutArgs) error
	Recv() (*MdtDialoutArgs, error)
	grpc.ClientStream
}

type gRPCMdtDialoutMdtDialoutClient struct {
	grpc.ClientStream
}

func (x *gRPCMdtDialoutMdtDialoutClient) Send(m *MdtDialoutArgs) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCMdtDialoutMdtDialoutClient) Recv() (*MdtDialoutArgs, error) {
	m := new(MdtDialoutArgs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCMdtDialoutServer is the server API for GRPCMdtDialout service.
type GRPCMdtDialoutServer interface {
	MdtDialout(GRPCMdtDialout_MdtDialoutServer) error
}

func RegisterGRPCMdtDialoutServer(s *grpc.Server, srv GRPCMdtDialoutServer) {
	s.RegisterService(&_GRPCMdtDialout_serviceDesc, srv)
}

func _GRPCMdtDialout_MdtDialout_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCMdtDialoutServer).MdtDialout(&gRPCMdtDialoutMdtDialoutServer{stream})
}

type GRPCMdtDialout_MdtDialoutServer interface {
	Send(*MdtDialoutArgs) error
	Recv() (*MdtDialoutArgs, error)
	grpc.ServerStream
}

type gRPCMdtDialoutMdtDialoutServer struct {
	grpc.ServerStream
}

func (x *gRPCMdtDialoutMdtDialoutServer) Send(m *MdtDialoutArgs) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCMdtDialoutMdtDialoutServer) Recv() (*MdtDialoutArgs, error) {
	m := new(MdtDialoutArgs)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GRPCMdtDialout_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mdt_dialout.gRPCMdtDialout",
	HandlerType: (*GRPCMdtDialoutServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MdtDialout",
			Handler:       _GRPCMdtDialout_MdtDialout_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/mdt_grpc_dialout/mdt_grpc_dialout.proto",
}

func (m *MdtDialoutArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MdtDialoutArgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReqId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMdtGrpcDialout(dAtA, i, uint64(m.ReqId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMdtGrpcDialout(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Errors) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMdtGrpcDialout(dAtA, i, uint64(len(m.Errors)))
		i += copy(dAtA[i:], m.Errors)
	}
	return i, nil
}

func encodeVarintMdtGrpcDialout(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MdtDialoutArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqId != 0 {
		n += 1 + sovMdtGrpcDialout(uint64(m.ReqId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMdtGrpcDialout(uint64(l))
	}
	l = len(m.Errors)
	if l > 0 {
		n += 1 + l + sovMdtGrpcDialout(uint64(l))
	}
	return n
}

func sovMdtGrpcDialout(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMdtGrpcDialout(x uint64) (n int) {
	return sovMdtGrpcDialout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MdtDialoutArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdtGrpcDialout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MdtDialoutArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MdtDialoutArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdtGrpcDialout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdtGrpcDialout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdtGrpcDialout
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdtGrpcDialout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdtGrpcDialout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdtGrpcDialout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdtGrpcDialout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMdtGrpcDialout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMdtGrpcDialout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMdtGrpcDialout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMdtGrpcDialout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMdtGrpcDialout
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMdtGrpcDialout
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMdtGrpcDialout(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMdtGrpcDialout = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMdtGrpcDialout   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("proto/mdt_grpc_dialout/mdt_grpc_dialout.proto", fileDescriptor_mdt_grpc_dialout_2f1e28c7e7e85859)
}

var fileDescriptor_mdt_grpc_dialout_2f1e28c7e7e85859 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x4d, 0x29, 0x89, 0x4f, 0x2f, 0x2a, 0x48, 0x8e, 0x4f, 0xc9, 0x4c, 0xcc, 0xc9,
	0x2f, 0x2d, 0xc1, 0x10, 0xd0, 0x03, 0xab, 0x13, 0xe2, 0x06, 0x89, 0x43, 0x85, 0x94, 0x82, 0xb8,
	0xf8, 0x7c, 0x53, 0x4a, 0x5c, 0x20, 0x3c, 0xc7, 0xa2, 0xf4, 0x62, 0x21, 0x11, 0x2e, 0xd6, 0xa0,
	0xd4, 0x42, 0xcf, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x08, 0x47, 0x48, 0x88, 0x8b,
	0x25, 0x25, 0xb1, 0x24, 0x51, 0x82, 0x49, 0x81, 0x51, 0x83, 0x27, 0x08, 0xcc, 0x16, 0x12, 0xe3,
	0x62, 0x4b, 0x2d, 0x2a, 0xca, 0x2f, 0x2a, 0x96, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2,
	0x8c, 0xe2, 0xb8, 0xf8, 0xd2, 0x83, 0x02, 0x9c, 0x11, 0xe6, 0x0a, 0xf9, 0x70, 0x71, 0x21, 0xf1,
	0xa4, 0xf5, 0x90, 0x5c, 0xa0, 0x87, 0x6a, 0xbd, 0x14, 0x3e, 0x49, 0x25, 0x06, 0x0d, 0x46, 0x03,
	0x46, 0x27, 0x89, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71,
	0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0xfb,
	0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x50, 0x5e, 0xf9, 0x1a, 0x12, 0x01, 0x00, 0x00,
}
