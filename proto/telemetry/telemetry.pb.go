// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/telemetry/telemetry.proto

package telemetry

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Telemetry message is the outermost payload message used to stream
// telemetry in a Model Driven Telemetry (MDT) system. MDT provides a
// mechanism for an external entity to subscribe to a data set defined in
// a Yang model and receive periodic or event-based updates of the data
// set from an MDT-capable device.
type Telemetry struct {
	//
	// node_id_str is a string encoded unique node ID of the MDT-capable
	// device producing the message. (node_id_uuid alternative is not currently
	// produced in IOS-XR)
	//
	// Types that are valid to be assigned to NodeId:
	//	*Telemetry_NodeIdStr
	NodeId isTelemetry_NodeId `protobuf_oneof:"node_id"`
	//
	// subscription_id_str is the name of the subscription against which
	// this content is being produced. (subscription_id alternative is not
	//  currently produced in IOS-XR)
	//
	// Types that are valid to be assigned to Subscription:
	//	*Telemetry_SubscriptionIdStr
	Subscription isTelemetry_Subscription `protobuf_oneof:"subscription"`
	//
	// sensor_path is not currently produced in IOS-XR
	// string   sensor_path = 5;
	//
	// encoding_path is the Yang path leading to the content in this message.
	// The Yang tree encoded in the content section of this message is rooted
	// at the point described by the encoding_path.
	EncodingPath string `protobuf:"bytes,6,opt,name=encoding_path,json=encodingPath,proto3" json:"encoding_path,omitempty"`
	//
	// model_version is not currently produced in IOS-XR
	// string   model_version = 7;
	//
	// collection_id identifies messages belonging to a collection round.
	// Multiple message may be generated from a collection round.
	CollectionId uint64 `protobuf:"varint,8,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	//
	// collection_start_time is the time when the collection identified by
	// the collection_id begins - encoded as milliseconds since the epoch.
	// If a single collection is spread over multiple Telemetry Messages,
	// collection_start_time may be encoded in the first Telemetry Message
	// for the collection only.
	CollectionStartTime uint64 `protobuf:"varint,9,opt,name=collection_start_time,json=collectionStartTime,proto3" json:"collection_start_time,omitempty"`
	//
	// msg_timestamp is the time when the data encoded in the Telemetry
	// message is generated - encoded as milliseconds since the epoch.
	MsgTimestamp uint64 `protobuf:"varint,10,opt,name=msg_timestamp,json=msgTimestamp,proto3" json:"msg_timestamp,omitempty"`
	//
	// data_gpbkv contains the payload data if data is being encoded in the
	// self-describing GPB-KV format.
	DataGpbkv []*TelemetryField `protobuf:"bytes,11,rep,name=data_gpbkv,json=dataGpbkv,proto3" json:"data_gpbkv,omitempty"`
	//
	// data_gpb contains the payload data if data is being encoded as
	// serialised GPB messages.
	DataGpb *TelemetryGPBTable `protobuf:"bytes,12,opt,name=data_gpb,json=dataGpb,proto3" json:"data_gpb,omitempty"`
	//
	// collection_end_time is the timestamp when the last Telemetry message
	// for a collection has been encoded - encoded as milliseconds since the
	// epoch. If a single collection is spread over multiple Telemetry
	// messages, collection_end_time is encoded in the last Telemetry Message
	// for the collection only.
	CollectionEndTime uint64 `protobuf:"varint,13,opt,name=collection_end_time,json=collectionEndTime,proto3" json:"collection_end_time,omitempty"`
}

func (m *Telemetry) Reset()         { *m = Telemetry{} }
func (m *Telemetry) String() string { return proto.CompactTextString(m) }
func (*Telemetry) ProtoMessage()    {}
func (*Telemetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_44f5a0e5f4bec473, []int{0}
}
func (m *Telemetry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Telemetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Telemetry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Telemetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Telemetry.Merge(dst, src)
}
func (m *Telemetry) XXX_Size() int {
	return m.Size()
}
func (m *Telemetry) XXX_DiscardUnknown() {
	xxx_messageInfo_Telemetry.DiscardUnknown(m)
}

var xxx_messageInfo_Telemetry proto.InternalMessageInfo

type isTelemetry_NodeId interface {
	isTelemetry_NodeId()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTelemetry_Subscription interface {
	isTelemetry_Subscription()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Telemetry_NodeIdStr struct {
	NodeIdStr string `protobuf:"bytes,1,opt,name=node_id_str,json=nodeIdStr,proto3,oneof"`
}
type Telemetry_SubscriptionIdStr struct {
	SubscriptionIdStr string `protobuf:"bytes,3,opt,name=subscription_id_str,json=subscriptionIdStr,proto3,oneof"`
}

func (*Telemetry_NodeIdStr) isTelemetry_NodeId()               {}
func (*Telemetry_SubscriptionIdStr) isTelemetry_Subscription() {}

func (m *Telemetry) GetNodeId() isTelemetry_NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}
func (m *Telemetry) GetSubscription() isTelemetry_Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (m *Telemetry) GetNodeIdStr() string {
	if x, ok := m.GetNodeId().(*Telemetry_NodeIdStr); ok {
		return x.NodeIdStr
	}
	return ""
}

func (m *Telemetry) GetSubscriptionIdStr() string {
	if x, ok := m.GetSubscription().(*Telemetry_SubscriptionIdStr); ok {
		return x.SubscriptionIdStr
	}
	return ""
}

func (m *Telemetry) GetEncodingPath() string {
	if m != nil {
		return m.EncodingPath
	}
	return ""
}

func (m *Telemetry) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *Telemetry) GetCollectionStartTime() uint64 {
	if m != nil {
		return m.CollectionStartTime
	}
	return 0
}

func (m *Telemetry) GetMsgTimestamp() uint64 {
	if m != nil {
		return m.MsgTimestamp
	}
	return 0
}

func (m *Telemetry) GetDataGpbkv() []*TelemetryField {
	if m != nil {
		return m.DataGpbkv
	}
	return nil
}

func (m *Telemetry) GetDataGpb() *TelemetryGPBTable {
	if m != nil {
		return m.DataGpb
	}
	return nil
}

func (m *Telemetry) GetCollectionEndTime() uint64 {
	if m != nil {
		return m.CollectionEndTime
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Telemetry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Telemetry_OneofMarshaler, _Telemetry_OneofUnmarshaler, _Telemetry_OneofSizer, []interface{}{
		(*Telemetry_NodeIdStr)(nil),
		(*Telemetry_SubscriptionIdStr)(nil),
	}
}

func _Telemetry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Telemetry)
	// node_id
	switch x := m.NodeId.(type) {
	case *Telemetry_NodeIdStr:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.NodeIdStr)
	case nil:
	default:
		return fmt.Errorf("Telemetry.NodeId has unexpected type %T", x)
	}
	// subscription
	switch x := m.Subscription.(type) {
	case *Telemetry_SubscriptionIdStr:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.SubscriptionIdStr)
	case nil:
	default:
		return fmt.Errorf("Telemetry.Subscription has unexpected type %T", x)
	}
	return nil
}

func _Telemetry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Telemetry)
	switch tag {
	case 1: // node_id.node_id_str
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.NodeId = &Telemetry_NodeIdStr{x}
		return true, err
	case 3: // subscription.subscription_id_str
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Subscription = &Telemetry_SubscriptionIdStr{x}
		return true, err
	default:
		return false, nil
	}
}

func _Telemetry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Telemetry)
	// node_id
	switch x := m.NodeId.(type) {
	case *Telemetry_NodeIdStr:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.NodeIdStr)))
		n += len(x.NodeIdStr)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// subscription
	switch x := m.Subscription.(type) {
	case *Telemetry_SubscriptionIdStr:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.SubscriptionIdStr)))
		n += len(x.SubscriptionIdStr)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//
// TelemetryField messages are used to export content in the self
// describing GPB KV form. The TelemetryField message is sufficient to
// decode telemetry messages for all models. KV-GPB encoding is very
// similar in concept, to JSON encoding
type TelemetryField struct {
	//
	// timestamp represents the starting time of the generation of data
	// starting from this key, value pair in this message - encoded as
	// milliseconds since the epoch. It is encoded when different from the
	// msg_timestamp in the containing Telemetry Message. This field can be
	// omitted if the value is the same as a TelemetryField message up the
	// hierarchy within the same Telemetry Message as well.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//
	// name: string encoding of the name in the key, value pair. It is
	// the corresponding YANG element name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//
	// value_by_type, if present, for the corresponding YANG element
	// represented by the name field in the same TelemetryField message. The
	// value is encoded to the matching type as defined in the YANG model.
	// YANG models often define new types (derived types) using one or more
	// base types.  The types included in the oneof grouping is sufficient to
	// represent such derived types. Derived types represented as a Yang
	// container are encoded using the nesting primitive defined in this
	// encoding proposal.
	//
	// Types that are valid to be assigned to ValueByType:
	//	*TelemetryField_BytesValue
	//	*TelemetryField_StringValue
	//	*TelemetryField_BoolValue
	//	*TelemetryField_Uint32Value
	//	*TelemetryField_Uint64Value
	//	*TelemetryField_Sint32Value
	//	*TelemetryField_Sint64Value
	//	*TelemetryField_DoubleValue
	//	*TelemetryField_FloatValue
	ValueByType isTelemetryField_ValueByType `protobuf_oneof:"value_by_type"`
	//
	// The Yang model may include nesting (e.g hierarchy of containers). The
	// next level of nesting, if present, is encoded, starting from fields.
	Fields []*TelemetryField `protobuf:"bytes,15,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (m *TelemetryField) Reset()         { *m = TelemetryField{} }
func (m *TelemetryField) String() string { return proto.CompactTextString(m) }
func (*TelemetryField) ProtoMessage()    {}
func (*TelemetryField) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_44f5a0e5f4bec473, []int{1}
}
func (m *TelemetryField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TelemetryField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryField.Merge(dst, src)
}
func (m *TelemetryField) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryField) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryField.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryField proto.InternalMessageInfo

type isTelemetryField_ValueByType interface {
	isTelemetryField_ValueByType()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TelemetryField_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,4,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}
type TelemetryField_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof"`
}
type TelemetryField_BoolValue struct {
	BoolValue bool `protobuf:"varint,6,opt,name=bool_value,json=boolValue,proto3,oneof"`
}
type TelemetryField_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,7,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}
type TelemetryField_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,8,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}
type TelemetryField_Sint32Value struct {
	Sint32Value int32 `protobuf:"zigzag32,9,opt,name=sint32_value,json=sint32Value,proto3,oneof"`
}
type TelemetryField_Sint64Value struct {
	Sint64Value int64 `protobuf:"zigzag64,10,opt,name=sint64_value,json=sint64Value,proto3,oneof"`
}
type TelemetryField_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,11,opt,name=double_value,json=doubleValue,proto3,oneof"`
}
type TelemetryField_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,12,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*TelemetryField_BytesValue) isTelemetryField_ValueByType()  {}
func (*TelemetryField_StringValue) isTelemetryField_ValueByType() {}
func (*TelemetryField_BoolValue) isTelemetryField_ValueByType()   {}
func (*TelemetryField_Uint32Value) isTelemetryField_ValueByType() {}
func (*TelemetryField_Uint64Value) isTelemetryField_ValueByType() {}
func (*TelemetryField_Sint32Value) isTelemetryField_ValueByType() {}
func (*TelemetryField_Sint64Value) isTelemetryField_ValueByType() {}
func (*TelemetryField_DoubleValue) isTelemetryField_ValueByType() {}
func (*TelemetryField_FloatValue) isTelemetryField_ValueByType()  {}

func (m *TelemetryField) GetValueByType() isTelemetryField_ValueByType {
	if m != nil {
		return m.ValueByType
	}
	return nil
}

func (m *TelemetryField) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TelemetryField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TelemetryField) GetBytesValue() []byte {
	if x, ok := m.GetValueByType().(*TelemetryField_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *TelemetryField) GetStringValue() string {
	if x, ok := m.GetValueByType().(*TelemetryField_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *TelemetryField) GetBoolValue() bool {
	if x, ok := m.GetValueByType().(*TelemetryField_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *TelemetryField) GetUint32Value() uint32 {
	if x, ok := m.GetValueByType().(*TelemetryField_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (m *TelemetryField) GetUint64Value() uint64 {
	if x, ok := m.GetValueByType().(*TelemetryField_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (m *TelemetryField) GetSint32Value() int32 {
	if x, ok := m.GetValueByType().(*TelemetryField_Sint32Value); ok {
		return x.Sint32Value
	}
	return 0
}

func (m *TelemetryField) GetSint64Value() int64 {
	if x, ok := m.GetValueByType().(*TelemetryField_Sint64Value); ok {
		return x.Sint64Value
	}
	return 0
}

func (m *TelemetryField) GetDoubleValue() float64 {
	if x, ok := m.GetValueByType().(*TelemetryField_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *TelemetryField) GetFloatValue() float32 {
	if x, ok := m.GetValueByType().(*TelemetryField_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *TelemetryField) GetFields() []*TelemetryField {
	if m != nil {
		return m.Fields
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TelemetryField) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TelemetryField_OneofMarshaler, _TelemetryField_OneofUnmarshaler, _TelemetryField_OneofSizer, []interface{}{
		(*TelemetryField_BytesValue)(nil),
		(*TelemetryField_StringValue)(nil),
		(*TelemetryField_BoolValue)(nil),
		(*TelemetryField_Uint32Value)(nil),
		(*TelemetryField_Uint64Value)(nil),
		(*TelemetryField_Sint32Value)(nil),
		(*TelemetryField_Sint64Value)(nil),
		(*TelemetryField_DoubleValue)(nil),
		(*TelemetryField_FloatValue)(nil),
	}
}

func _TelemetryField_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TelemetryField)
	// value_by_type
	switch x := m.ValueByType.(type) {
	case *TelemetryField_BytesValue:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.BytesValue)
	case *TelemetryField_StringValue:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StringValue)
	case *TelemetryField_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *TelemetryField_Uint32Value:
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Uint32Value))
	case *TelemetryField_Uint64Value:
		_ = b.EncodeVarint(8<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Uint64Value))
	case *TelemetryField_Sint32Value:
		_ = b.EncodeVarint(9<<3 | proto.WireVarint)
		_ = b.EncodeZigzag32(uint64(x.Sint32Value))
	case *TelemetryField_Sint64Value:
		_ = b.EncodeVarint(10<<3 | proto.WireVarint)
		_ = b.EncodeZigzag64(uint64(x.Sint64Value))
	case *TelemetryField_DoubleValue:
		_ = b.EncodeVarint(11<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *TelemetryField_FloatValue:
		_ = b.EncodeVarint(12<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.FloatValue)))
	case nil:
	default:
		return fmt.Errorf("TelemetryField.ValueByType has unexpected type %T", x)
	}
	return nil
}

func _TelemetryField_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TelemetryField)
	switch tag {
	case 4: // value_by_type.bytes_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.ValueByType = &TelemetryField_BytesValue{x}
		return true, err
	case 5: // value_by_type.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ValueByType = &TelemetryField_StringValue{x}
		return true, err
	case 6: // value_by_type.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueByType = &TelemetryField_BoolValue{x != 0}
		return true, err
	case 7: // value_by_type.uint32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueByType = &TelemetryField_Uint32Value{uint32(x)}
		return true, err
	case 8: // value_by_type.uint64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueByType = &TelemetryField_Uint64Value{x}
		return true, err
	case 9: // value_by_type.sint32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag32()
		m.ValueByType = &TelemetryField_Sint32Value{int32(x)}
		return true, err
	case 10: // value_by_type.sint64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag64()
		m.ValueByType = &TelemetryField_Sint64Value{int64(x)}
		return true, err
	case 11: // value_by_type.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.ValueByType = &TelemetryField_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 12: // value_by_type.float_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.ValueByType = &TelemetryField_FloatValue{math.Float32frombits(uint32(x))}
		return true, err
	default:
		return false, nil
	}
}

func _TelemetryField_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TelemetryField)
	// value_by_type
	switch x := m.ValueByType.(type) {
	case *TelemetryField_BytesValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.BytesValue)))
		n += len(x.BytesValue)
	case *TelemetryField_StringValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *TelemetryField_BoolValue:
		n += 1 // tag and wire
		n += 1
	case *TelemetryField_Uint32Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Uint32Value))
	case *TelemetryField_Uint64Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Uint64Value))
	case *TelemetryField_Sint32Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64((uint32(x.Sint32Value) << 1) ^ uint32((int32(x.Sint32Value) >> 31))))
	case *TelemetryField_Sint64Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(uint64(x.Sint64Value<<1) ^ uint64((int64(x.Sint64Value) >> 63))))
	case *TelemetryField_DoubleValue:
		n += 1 // tag and wire
		n += 8
	case *TelemetryField_FloatValue:
		n += 1 // tag and wire
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TelemetryGPBTable contains a repeated number of TelemetryRowGPB,
// each of which represents content from a subtree instance in the
// the YANG model. For example; a TelemetryGPBTable might contain
// the interface statistics of a collection of interfaces.
type TelemetryGPBTable struct {
	Row []*TelemetryRowGPB `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty"`
}

func (m *TelemetryGPBTable) Reset()         { *m = TelemetryGPBTable{} }
func (m *TelemetryGPBTable) String() string { return proto.CompactTextString(m) }
func (*TelemetryGPBTable) ProtoMessage()    {}
func (*TelemetryGPBTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_44f5a0e5f4bec473, []int{2}
}
func (m *TelemetryGPBTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryGPBTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryGPBTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TelemetryGPBTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryGPBTable.Merge(dst, src)
}
func (m *TelemetryGPBTable) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryGPBTable) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryGPBTable.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryGPBTable proto.InternalMessageInfo

func (m *TelemetryGPBTable) GetRow() []*TelemetryRowGPB {
	if m != nil {
		return m.Row
	}
	return nil
}

//
// TelemetryRowGPB, in conjunction with the Telemetry encoding_path and
// model_version, unambiguously represents the root of a subtree in
// the YANG model, and content from that subtree encoded in serialised
// GPB messages. For example; a TelemetryRowGPB might contain the
// interface statistics of one interface. Per encoding-path .proto
// messages are required to decode keys/content pairs below.
type TelemetryRowGPB struct {
	//
	// timestamp at which the data for this instance of the TelemetryRowGPB
	// message was generated by an MDT-capable device - encoded as
	// milliseconds since the epoch.  When included, this is typically
	// different from the msg_timestamp in the containing Telemetry message.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//
	// keys: if the encoding-path includes one or more list elements, and/or
	// ends in a list element, the keys field is a GPB encoded message that
	// contains the sequence of key values for each such list element in the
	// encoding-path traversed starting from the root.  The set of keys
	// unambiguously identifies the instance of data encoded in the
	// TelemetryRowGPB message. Corresponding protobuf message definition will
	// be required to decode the byte stream. The encoding_path field in
	// Telemetry message, together with model_version field should be
	// sufficient to identify the corresponding protobuf message.
	Keys []byte `protobuf:"bytes,10,opt,name=keys,proto3" json:"keys,omitempty"`
	//
	// content: the content field is a GPB encoded message that contains the
	// data for the corresponding encoding-path. A separate decoding pass
	// would be performed by consumer with the content field as a GPB message
	// and the matching .proto used to decode the message. Corresponding
	// protobuf message definition will be required to decode the byte
	// stream. The encoding_path field in Telemetry message, together with
	// model_version field should be sufficient to identify the corresponding
	// protobuf message. The decoded combination of keys (when present) and
	// content, unambiguously represents an instance of the data set, as
	// defined in the Yang model, identified by the encoding-path in the
	// containing Telemetry message.
	Content []byte `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *TelemetryRowGPB) Reset()         { *m = TelemetryRowGPB{} }
func (m *TelemetryRowGPB) String() string { return proto.CompactTextString(m) }
func (*TelemetryRowGPB) ProtoMessage()    {}
func (*TelemetryRowGPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_44f5a0e5f4bec473, []int{3}
}
func (m *TelemetryRowGPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryRowGPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryRowGPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TelemetryRowGPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryRowGPB.Merge(dst, src)
}
func (m *TelemetryRowGPB) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryRowGPB) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryRowGPB.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryRowGPB proto.InternalMessageInfo

func (m *TelemetryRowGPB) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TelemetryRowGPB) GetKeys() []byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *TelemetryRowGPB) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Telemetry)(nil), "telemetry.Telemetry")
	proto.RegisterType((*TelemetryField)(nil), "telemetry.TelemetryField")
	proto.RegisterType((*TelemetryGPBTable)(nil), "telemetry.TelemetryGPBTable")
	proto.RegisterType((*TelemetryRowGPB)(nil), "telemetry.TelemetryRowGPB")
}
func (m *Telemetry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Telemetry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != nil {
		nn1, err := m.NodeId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.Subscription != nil {
		nn2, err := m.Subscription.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if len(m.EncodingPath) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.EncodingPath)))
		i += copy(dAtA[i:], m.EncodingPath)
	}
	if m.CollectionId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.CollectionId))
	}
	if m.CollectionStartTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.CollectionStartTime))
	}
	if m.MsgTimestamp != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.MsgTimestamp))
	}
	if len(m.DataGpbkv) > 0 {
		for _, msg := range m.DataGpbkv {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DataGpb != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.DataGpb.Size()))
		n3, err := m.DataGpb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.CollectionEndTime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.CollectionEndTime))
	}
	return i, nil
}

func (m *Telemetry_NodeIdStr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(len(m.NodeIdStr)))
	i += copy(dAtA[i:], m.NodeIdStr)
	return i, nil
}
func (m *Telemetry_SubscriptionIdStr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(len(m.SubscriptionIdStr)))
	i += copy(dAtA[i:], m.SubscriptionIdStr)
	return i, nil
}
func (m *TelemetryField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryField) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ValueByType != nil {
		nn4, err := m.ValueByType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TelemetryField_BytesValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BytesValue != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.BytesValue)))
		i += copy(dAtA[i:], m.BytesValue)
	}
	return i, nil
}
func (m *TelemetryField_StringValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(len(m.StringValue)))
	i += copy(dAtA[i:], m.StringValue)
	return i, nil
}
func (m *TelemetryField_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x30
	i++
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *TelemetryField_Uint32Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x38
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Uint32Value))
	return i, nil
}
func (m *TelemetryField_Uint64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x40
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Uint64Value))
	return i, nil
}
func (m *TelemetryField_Sint32Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x48
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64((uint32(m.Sint32Value)<<1)^uint32((m.Sint32Value>>31))))
	return i, nil
}
func (m *TelemetryField_Sint64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x50
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64((uint64(m.Sint64Value)<<1)^uint64((m.Sint64Value>>63))))
	return i, nil
}
func (m *TelemetryField_DoubleValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x59
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleValue))))
	i += 8
	return i, nil
}
func (m *TelemetryField_FloatValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x65
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FloatValue))))
	i += 4
	return i, nil
}
func (m *TelemetryGPBTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryGPBTable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Row) > 0 {
		for _, msg := range m.Row {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TelemetryRowGPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryRowGPB) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Keys) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Keys)))
		i += copy(dAtA[i:], m.Keys)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Telemetry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeId != nil {
		n += m.NodeId.Size()
	}
	if m.Subscription != nil {
		n += m.Subscription.Size()
	}
	l = len(m.EncodingPath)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovTelemetry(uint64(m.CollectionId))
	}
	if m.CollectionStartTime != 0 {
		n += 1 + sovTelemetry(uint64(m.CollectionStartTime))
	}
	if m.MsgTimestamp != 0 {
		n += 1 + sovTelemetry(uint64(m.MsgTimestamp))
	}
	if len(m.DataGpbkv) > 0 {
		for _, e := range m.DataGpbkv {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if m.DataGpb != nil {
		l = m.DataGpb.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.CollectionEndTime != 0 {
		n += 1 + sovTelemetry(uint64(m.CollectionEndTime))
	}
	return n
}

func (m *Telemetry_NodeIdStr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeIdStr)
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}
func (m *Telemetry_SubscriptionIdStr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionIdStr)
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}
func (m *TelemetryField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovTelemetry(uint64(m.Timestamp))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.ValueByType != nil {
		n += m.ValueByType.Size()
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *TelemetryField_BytesValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BytesValue != nil {
		l = len(m.BytesValue)
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}
func (m *TelemetryField_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}
func (m *TelemetryField_BoolValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *TelemetryField_Uint32Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTelemetry(uint64(m.Uint32Value))
	return n
}
func (m *TelemetryField_Uint64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTelemetry(uint64(m.Uint64Value))
	return n
}
func (m *TelemetryField_Sint32Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozTelemetry(uint64(m.Sint32Value))
	return n
}
func (m *TelemetryField_Sint64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sozTelemetry(uint64(m.Sint64Value))
	return n
}
func (m *TelemetryField_DoubleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *TelemetryField_FloatValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *TelemetryGPBTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Row) > 0 {
		for _, e := range m.Row {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *TelemetryRowGPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovTelemetry(uint64(m.Timestamp))
	}
	l = len(m.Keys)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func sovTelemetry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Telemetry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Telemetry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Telemetry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = &Telemetry_NodeIdStr{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionIdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscription = &Telemetry_SubscriptionIdStr{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodingPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodingPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionStartTime", wireType)
			}
			m.CollectionStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionStartTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTimestamp", wireType)
			}
			m.MsgTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGpbkv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGpbkv = append(m.DataGpbkv, &TelemetryField{})
			if err := m.DataGpbkv[len(m.DataGpbkv)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGpb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataGpb == nil {
				m.DataGpb = &TelemetryGPBTable{}
			}
			if err := m.DataGpb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionEndTime", wireType)
			}
			m.CollectionEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionEndTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.ValueByType = &TelemetryField_BytesValue{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueByType = &TelemetryField_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ValueByType = &TelemetryField_BoolValue{b}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32Value", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValueByType = &TelemetryField_Uint32Value{v}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64Value", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValueByType = &TelemetryField_Uint64Value{v}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ValueByType = &TelemetryField_Sint32Value{v}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64Value", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ValueByType = &TelemetryField_Sint64Value{int64(v)}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ValueByType = &TelemetryField_DoubleValue{float64(math.Float64frombits(v))}
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ValueByType = &TelemetryField_FloatValue{float32(math.Float32frombits(v))}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &TelemetryField{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryGPBTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryGPBTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryGPBTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Row = append(m.Row, &TelemetryRowGPB{})
			if err := m.Row[len(m.Row)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryRowGPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryRowGPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryRowGPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys[:0], dAtA[iNdEx:postIndex]...)
			if m.Keys == nil {
				m.Keys = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelemetry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelemetry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("proto/telemetry/telemetry.proto", fileDescriptor_telemetry_44f5a0e5f4bec473)
}

var fileDescriptor_telemetry_44f5a0e5f4bec473 = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x41, 0x6f, 0x9b, 0x30,
	0x14, 0xc7, 0xe3, 0xa6, 0x6b, 0xca, 0x83, 0x34, 0x8a, 0xab, 0x49, 0xde, 0x54, 0x51, 0x9a, 0x5e,
	0x38, 0x4c, 0xd9, 0x96, 0x56, 0xdd, 0xae, 0x43, 0xda, 0xd2, 0xde, 0x22, 0x1a, 0xed, 0x36, 0x21,
	0x08, 0x6e, 0x8a, 0x0a, 0x18, 0x61, 0xa7, 0x55, 0xbe, 0xc5, 0x3e, 0xd2, 0x8e, 0x93, 0x76, 0xe9,
	0x71, 0xc7, 0x29, 0xf9, 0x22, 0x93, 0x0d, 0x04, 0xb2, 0x55, 0xea, 0xcd, 0xfc, 0xdf, 0xcf, 0x7f,
	0x3d, 0xbf, 0xf7, 0x17, 0x70, 0x9c, 0xe5, 0x4c, 0xb0, 0xb7, 0x82, 0xc6, 0x34, 0xa1, 0x22, 0x5f,
	0xd6, 0xa7, 0xa1, 0xaa, 0x60, 0x6d, 0x23, 0x0c, 0x7e, 0xb4, 0x41, 0x9b, 0x56, 0x5f, 0xd8, 0x02,
	0x3d, 0x65, 0x21, 0xf5, 0xa2, 0xd0, 0xe3, 0x22, 0x27, 0xc8, 0x42, 0xb6, 0x76, 0xd9, 0x72, 0x35,
	0x29, 0x5e, 0x85, 0xd7, 0x22, 0xc7, 0xef, 0xe0, 0x90, 0x2f, 0x02, 0x3e, 0xcb, 0xa3, 0x4c, 0x44,
	0x2c, 0xad, 0xc8, 0xb6, 0x22, 0x91, 0xdb, 0x6f, 0x16, 0x8b, 0x1b, 0xa7, 0xd0, 0xa5, 0xe9, 0x8c,
	0x85, 0x51, 0x3a, 0xf7, 0x32, 0x5f, 0xdc, 0x92, 0x3d, 0xc9, 0xba, 0x46, 0x25, 0x4e, 0x7c, 0x71,
	0x2b, 0xa1, 0x19, 0x8b, 0x63, 0x3a, 0x2b, 0x4d, 0xc9, 0xbe, 0x85, 0xec, 0x5d, 0xd7, 0xa8, 0xc5,
	0xab, 0x10, 0x8f, 0xe0, 0x65, 0x03, 0xe2, 0xc2, 0xcf, 0x85, 0x27, 0xa2, 0x84, 0x12, 0x4d, 0xc1,
	0x87, 0x75, 0xf1, 0x5a, 0xd6, 0xa6, 0x51, 0x42, 0xa5, 0x71, 0xc2, 0xe7, 0x0a, 0xe3, 0xc2, 0x4f,
	0x32, 0x02, 0x85, 0x71, 0xc2, 0xe7, 0xd3, 0x4a, 0xc3, 0x1f, 0x01, 0x42, 0x5f, 0xf8, 0xde, 0x3c,
	0x0b, 0xee, 0xee, 0x89, 0x6e, 0xb5, 0x6d, 0x7d, 0xf4, 0x6a, 0x58, 0x4f, 0x6d, 0x33, 0xa0, 0x2f,
	0x11, 0x8d, 0x43, 0x57, 0x93, 0xf0, 0x58, 0xb2, 0xf8, 0x03, 0xec, 0x57, 0x37, 0x89, 0x61, 0x21,
	0x5b, 0x1f, 0x1d, 0x3d, 0x75, 0x6f, 0x3c, 0x71, 0xa6, 0x7e, 0x10, 0x53, 0xb7, 0x53, 0x5e, 0xc5,
	0x43, 0x68, 0xb4, 0xeb, 0xd1, 0x34, 0x2c, 0x5e, 0xd2, 0x55, 0xdd, 0xf5, 0xeb, 0xd2, 0xe7, 0x34,
	0x94, 0x7d, 0x3a, 0x1a, 0x74, 0xca, 0xcd, 0x38, 0x07, 0x60, 0x34, 0xa7, 0x3c, 0xf8, 0xd5, 0x86,
	0x83, 0xed, 0x0e, 0xf1, 0x11, 0x68, 0xf5, 0x8b, 0x91, 0xf2, 0xac, 0x05, 0x8c, 0x61, 0x37, 0xf5,
	0x13, 0x4a, 0x76, 0xd4, 0x22, 0xd4, 0x19, 0x9f, 0x80, 0x1e, 0x2c, 0x05, 0xe5, 0xde, 0xbd, 0x1f,
	0x2f, 0x28, 0xd9, 0xb5, 0x90, 0x6d, 0x5c, 0xb6, 0x5c, 0x50, 0xe2, 0x57, 0xa9, 0xe1, 0x53, 0x30,
	0xb8, 0xc8, 0xe5, 0x1a, 0x0b, 0xe6, 0x45, 0x99, 0x0e, 0xbd, 0x50, 0x0b, 0xe8, 0x18, 0x20, 0x60,
	0x2c, 0x2e, 0x11, 0xb9, 0xea, 0x7d, 0x19, 0x20, 0xa9, 0x6d, 0x5c, 0x16, 0x51, 0x2a, 0xce, 0x46,
	0x25, 0xd2, 0xb1, 0x90, 0xdd, 0x95, 0x2e, 0x85, 0xba, 0x05, 0x5d, 0x9c, 0x97, 0x90, 0x4a, 0x43,
	0x05, 0x5d, 0x9c, 0xd7, 0xfd, 0x34, 0x9d, 0x64, 0x0a, 0xfa, 0xaa, 0x9f, 0x6d, 0x27, 0xde, 0x74,
	0x92, 0xeb, 0xc7, 0x15, 0xd4, 0x70, 0x0a, 0xd9, 0x22, 0x88, 0x69, 0x09, 0xe9, 0x16, 0xb2, 0x91,
	0x84, 0x0a, 0xb5, 0x80, 0x4e, 0x40, 0xbf, 0x89, 0x99, 0x2f, 0x4a, 0x46, 0x6e, 0x7b, 0x47, 0x4e,
	0x48, 0x89, 0x05, 0xf2, 0x1e, 0xf6, 0x6e, 0xe4, 0xfc, 0x39, 0xe9, 0x3d, 0x97, 0xa1, 0x12, 0x74,
	0x7a, 0xd0, 0x55, 0x7e, 0x5e, 0xb0, 0xf4, 0xc4, 0x32, 0xa3, 0x83, 0x4f, 0xd0, 0xff, 0x2f, 0x36,
	0xf8, 0x0d, 0xb4, 0x73, 0xf6, 0x40, 0x90, 0x72, 0x7d, 0xfd, 0x94, 0xab, 0xcb, 0x1e, 0xc6, 0x13,
	0xc7, 0x95, 0xd8, 0xe0, 0x1b, 0xf4, 0xfe, 0xd1, 0x9f, 0x0f, 0xc4, 0x1d, 0x5d, 0x72, 0x35, 0x1c,
	0xc3, 0x55, 0x67, 0x4c, 0xa0, 0x33, 0x63, 0xa9, 0xa0, 0xa9, 0x50, 0xe3, 0x30, 0xdc, 0xea, 0xd3,
	0x21, 0x3f, 0x57, 0x26, 0x7a, 0x5c, 0x99, 0xe8, 0xcf, 0xca, 0x44, 0xdf, 0xd7, 0x66, 0xeb, 0x71,
	0x6d, 0xb6, 0x7e, 0xaf, 0xcd, 0x56, 0xb0, 0xa7, 0x7e, 0x2f, 0x67, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xbf, 0xc5, 0x61, 0x56, 0x81, 0x04, 0x00, 0x00,
}
